d <- read_csv(file.path("Results", file))
d <- d %>%
drop_na(Corrected.Fixation.X) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
drop_na(V.Frame.N) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Blinded", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Complete", file))
}
list_files <- list.files(path = "Results", pattern = "*eyeScrollR.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
drop_na(Corrected.Fixation.X) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
drop_na(V.Frame.N) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Blinded", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Complete", file))
}
print("")
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
drop_na(Corrected.Fixation.X) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
drop_na(V.Frame.N) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Blinded", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Complete", file))
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
Filter(is.na(Corrected.Fixation.X)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
Filter(is.na(Corrected.Fixation.X)) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Blinded", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Complete", file))
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(is.na(Corrected.Fixation.X)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
slice_sample(n=30) %>%
filter(is.na(Corrected.Fixation.X)) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Blinded", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Complete", file))
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.X)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
slice_sample(n=30) %>%
filter(!is.na(Corrected.Fixation.X)) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Blinded", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Complete", file))
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.Y)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Complete", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Blinded", file))
}
library(tidyverse)
library(png)
library(eyeScrollR)
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.Y)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Complete", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Blinded", file))
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.Y)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
slice_sample(n=30) %>%
filter(!is.na(V.Frame.N)) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Complete", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Blinded", file))
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.Y)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
filter(!is.na(V.Frame.N)) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Complete", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Blinded", file))
}
# Written by Nathanael Larigaldie
infer_video_frames <- function(d, fps, start)
{
d <- d %>% mutate(Video.Frame.N = floor((Timestamp - start)*fps / (1000)))
d <- d %>% mutate(Video.Frame = paste0(floor(floor(Video.Frame.N/fps)/60) %% 60, "m", floor(Video.Frame.N/fps) %% 60, "s", Video.Frame.N %% fps, "f"))
d <- d %>% mutate(Video.Frame = ifelse(Video.Frame.N<0, paste0(0, "m", 0, "s", -1, "f"), Video.Frame))
return(d)
}
fps <- 24
d <- read_csv(file.path("Data", "iMotions", "data.csv"), comment = "#")
names(d) <- make.names(names(d))
d <- d %>% select(Timestamp, SlideEvent, Data, Fixation.X, Fixation.Y)
d_start_stop <- d %>% filter(grepl("MouseEvent:WM_LBUTTONDOWN", Data, fixed=TRUE) | grepl("Key:W", Data, fixed=TRUE))
t_shift <- d %>% filter(SlideEvent == "StartMedia") %>% select(Timestamp)
d <- infer_video_frames(d, fps, t_shift$Timestamp[1])
cal_img <- readPNG(file.path("Data", "iMotions", "calibration_1920_1080.png"))
cal <- scroll_calibration_auto(cal_img, 100)
for(i in seq_len(4))
{
full_page_image <- readPNG(file.path("Data", "iMotions", paste0("S", i, "_1920_1080"), "full_page_image.png"))
eye_scroll_correct(eyes_data = d, timestamp_start = d_start_stop$Timestamp[i], timestamp_stop = d_start_stop$Timestamp[i+1], image_width = dim(full_page_image)[1], image_height = dim(full_page_image[2]), calibration = cal, time_shift = t_shift$Timestamp[1], output_file = file.path("Results", paste0("S", i, "_1920_1080_iMotions", ".csv")), scroll_lag = (1/120)*1000)
}
image_width = dim(full_page_image)[1]
dim(full_page_image)[1]
full_page_image[2]
dim(full_page_image[2])
dim(full_page_image)
dim(full_page_image)[1]
dim(full_page_image)[2]
# Written by Nathanael Larigaldie
infer_video_frames <- function(d, fps, start)
{
d <- d %>% mutate(Video.Frame.N = floor((Timestamp - start)*fps / (1000)))
d <- d %>% mutate(Video.Frame = paste0(floor(floor(Video.Frame.N/fps)/60) %% 60, "m", floor(Video.Frame.N/fps) %% 60, "s", Video.Frame.N %% fps, "f"))
d <- d %>% mutate(Video.Frame = ifelse(Video.Frame.N<0, paste0(0, "m", 0, "s", -1, "f"), Video.Frame))
return(d)
}
fps <- 24
d <- read_csv(file.path("Data", "iMotions", "data.csv"), comment = "#")
names(d) <- make.names(names(d))
d <- d %>% select(Timestamp, SlideEvent, Data, Fixation.X, Fixation.Y)
d_start_stop <- d %>% filter(grepl("MouseEvent:WM_LBUTTONDOWN", Data, fixed=TRUE) | grepl("Key:W", Data, fixed=TRUE))
t_shift <- d %>% filter(SlideEvent == "StartMedia") %>% select(Timestamp)
d <- infer_video_frames(d, fps, t_shift$Timestamp[1])
cal_img <- readPNG(file.path("Data", "iMotions", "calibration_1920_1080.png"))
cal <- scroll_calibration_auto(cal_img, 100)
for(i in seq_len(4))
{
full_page_image <- readPNG(file.path("Data", "iMotions", paste0("S", i, "_1920_1080"), "full_page_image.png"))
eye_scroll_correct(eyes_data = d, timestamp_start = d_start_stop$Timestamp[i], timestamp_stop = d_start_stop$Timestamp[i+1], image_width = dim(full_page_image)[2], image_height = dim(full_page_image)[1], calibration = cal, time_shift = t_shift$Timestamp[1], output_file = file.path("Results", paste0("S", i, "_1920_1080_iMotions", ".csv")), scroll_lag = (1/120)*1000)
}
# Written by Nathanael Larigaldie
library(tidyverse)
library(png)
library(eyeScrollR)
get_sync_time <- function(file_name)
{
d <- read_tsv(file.path("Data", "EyeLink", file_name, "Reports", "Output", "messages.xls"), col_types = "ccccc")
d <- d %>% filter(CURRENT_MSG_TEXT == "SYNCTIME")
return(as.numeric(d$CURRENT_MSG_TIME) + as.numeric(d$TRIAL_START_TIME))
}
merge_datasets <- function(file, sync_time, file_name)
{
display_data <- read_csv(file.path("Data", "EyeLink", file)) %>% mutate(Timestamp = round(Timestamp)) %>% select(Timestamp, Source, Data)
sync_time_display <- display_data$Timestamp[which(grepl("SYNCTIME", display_data$Data, fixed=TRUE))]
sync_time_shift <- sync_time - sync_time_display
gaze_data <- read_tsv(file.path("Data", "EyeLink", file_name, "Reports", "Output", "gaze.xls"), col_types = "ccccccc")
fix_data <- read_tsv(file.path("Data", "EyeLink", file_name, "Reports", "Output", "fixations.xls"), col_types = "cccccccc")
trial_start_time <- as.numeric(sub(",", ".", gaze_data$TRIAL_START_TIME[1], fixed = TRUE))
merged_data <- gaze_data %>% left_join(fix_data %>% select(CURRENT_FIX_X, CURRENT_FIX_Y, CURRENT_FIX_START, CURRENT_FIX_END, CURRENT_FIX_INDEX), by=join_by(RIGHT_FIX_INDEX == CURRENT_FIX_INDEX))
eyes_data <- tibble(Timestamp = as.numeric(sub(",", ".", merged_data$TIMESTAMP, fixed = TRUE)) - sync_time_shift,
Gaze.X = as.numeric(sub(",", ".", merged_data$RIGHT_GAZE_X, fixed = TRUE)),
Gaze.Y = as.numeric(sub(",", ".", merged_data$RIGHT_GAZE_Y, fixed = TRUE)),
Fixation.X = as.numeric(sub(",", ".", merged_data$CURRENT_FIX_X, fixed = TRUE)),
Fixation.Y = as.numeric(sub(",", ".", merged_data$CURRENT_FIX_Y, fixed = TRUE)),
Fixation.Start = as.numeric(sub(",", ".", merged_data$CURRENT_FIX_START, fixed = TRUE)) + trial_start_time - sync_time_shift,
Fixation.End = as.numeric(sub(",", ".", merged_data$CURRENT_FIX_END, fixed = TRUE)) + trial_start_time - sync_time_shift,
Fixation.Index = as.numeric(sub(",", ".", merged_data$RIGHT_FIX_INDEX, fixed = TRUE)))
return(display_data %>% full_join(eyes_data, by="Timestamp") %>% arrange(Timestamp))
}
infer_video_frames <- function(d, fps)
{
frame_number <- -1
minutes <- 0
seconds <- 0
frame <- -1
d$Video.Frame <- " "
d$Video.Frame.N <- -1
for(i in seq_len(nrow(d)))
{
if(grepl("Frame", d[[i, "Data"]], fixed=TRUE))
{
frame_number <- as.numeric(strsplit(d[[i, "Data"]], " ")[[1]][2])
frame <- frame_number %% fps
seconds <- floor(frame_number/fps) %% 60
minutes <- floor(floor(frame_number/fps)/60) %% 60
}
d[i, "Video.Frame"] <- paste0(minutes, "m", seconds, "s", frame, "f")
d[i, "Video.Frame.N"] <- frame_number
}
return(d)
}
fps <- 30.0
list_files <- list.files(path= file.path("Data", "EyeLink"),pattern = "*.csv$")
for(file in list_files)
{
file_name <- strsplit(file, ".", fixed=TRUE)[[1]][1]
sync_time <- get_sync_time(file_name)
d <- merge_datasets(file, sync_time, file_name)
d <- infer_video_frames(d, fps)
start_time <- d %>% filter(Data == "SYNCTIME")
start_time <- start_time$Timestamp
end_time <- d %>% filter(Data == "Key: 's' (Released)")
end_time <- end_time$Timestamp
# write_csv(d, file.path("Results", paste0(file_name, "_merged", ".csv")), na="")
## eyeScrollR specific code here
cal_img <- readPNG(file.path("Data", "EyeLink", paste0("calibration_", strsplit(file_name, "_", fixed=TRUE)[[1]][2], "_", strsplit(file_name, "_", fixed=TRUE)[[1]][3], ".png")))
cal <- scroll_calibration_auto(cal_img, 100)
full_page_image <- readPNG(file.path("Data", "EyeLink", file_name, "full_page_image.png"))
if(file.exists(file.path("Data", "EyeLink", paste0(file_name, ".RData"))))
{
load(file.path("Data", "EyeLink", paste0(file_name, ".RData")))
}
else
{
fixed_areas = list()
rules = list()
}
eye_scroll_correct(eyes_data = d, timestamp_start = start_time, timestamp_stop = end_time, image_width = dim(full_page_image)[2], image_height = dim(full_page_image)[1], calibration = cal, output_file = file.path("Results", paste0(file_name, ".csv")), scroll_lag = (1/120)*1000, fixed_areas = fixed_areas, rules = rules)
}
# Written by Nathanael Larigaldie
infer_video_frames <- function(d, fps, start)
{
d <- d %>% mutate(Video.Frame.N = floor((Timestamp - start)*fps / (1000)))
d <- d %>% mutate(Video.Frame = paste0(floor(floor(Video.Frame.N/fps)/60) %% 60, "m", floor(Video.Frame.N/fps) %% 60, "s", Video.Frame.N %% fps, "f"))
d <- d %>% mutate(Video.Frame = ifelse(Video.Frame.N<0, paste0(0, "m", 0, "s", -1, "f"), Video.Frame))
return(d)
}
fps <- 24
d <- read_csv(file.path("Data", "iMotions", "data.csv"), comment = "#")
names(d) <- make.names(names(d))
d <- d %>% select(Timestamp, SlideEvent, Data, Fixation.X, Fixation.Y)
d_start_stop <- d %>% filter(grepl("MouseEvent:WM_LBUTTONDOWN", Data, fixed=TRUE) | grepl("Key:W", Data, fixed=TRUE))
t_shift <- d %>% filter(SlideEvent == "StartMedia") %>% select(Timestamp)
d <- infer_video_frames(d, fps, t_shift$Timestamp[1])
cal_img <- readPNG(file.path("Data", "iMotions", "calibration_1920_1080.png"))
cal <- scroll_calibration_auto(cal_img, 100)
for(i in seq_len(4))
{
full_page_image <- readPNG(file.path("Data", "iMotions", paste0("S", i, "_1920_1080"), "full_page_image.png"))
eye_scroll_correct(eyes_data = d, timestamp_start = d_start_stop$Timestamp[i], timestamp_stop = d_start_stop$Timestamp[i+1], image_width = dim(full_page_image)[2], image_height = dim(full_page_image)[1], calibration = cal, time_shift = t_shift$Timestamp[1], output_file = file.path("Results", paste0("S", i, "_1920_1080_iMotions", ".csv")), scroll_lag = (1/120)*1000)
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.Y)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
filter(!is.na(V.Frame.N)) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Complete", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Blinded", file))
}
"et" in "test"
grepl("et", "test")
grepl("et", "test", fixed=TRUE)
grepl("es", "test", fixed=TRUE)
# Written by Nathanael Larigaldie
infer_video_frames <- function(d, fps, start)
{
d <- d %>% mutate(Video.Frame.N = floor((Timestamp - start)*fps / (1000)))
d <- d %>% mutate(Video.Frame = paste0(floor(floor(Video.Frame.N/fps)/60) %% 60, "m", floor(Video.Frame.N/fps) %% 60, "s", Video.Frame.N %% fps, "f"))
d <- d %>% mutate(Video.Frame = ifelse(Video.Frame.N<0, paste0(0, "m", 0, "s", -1, "f"), Video.Frame))
return(d)
}
fps <- 24
d <- read_csv(file.path("Data", "iMotions", "data.csv"), comment = "#")
names(d) <- make.names(names(d))
d <- d %>% select(Timestamp, SlideEvent, Data, Fixation.X, Fixation.Y)
d_start_stop <- d %>% filter(grepl("MouseEvent:WM_LBUTTONDOWN", Data, fixed=TRUE) | grepl("Key:W", Data, fixed=TRUE))
t_shift <- d %>% filter(SlideEvent == "StartMedia") %>% select(Timestamp)
d <- infer_video_frames(d, fps, t_shift$Timestamp[1])
cal_img <- readPNG(file.path("Data", "iMotions", "calibration_1920_1080.png"))
cal <- scroll_calibration_auto(cal_img, 100)
for(i in seq_len(4))
{
full_page_image <- readPNG(file.path("Data", "iMotions", paste0("S", i, "_1920_1080"), "full_page_image.png"))
img_wdth <- dim(full_page_image)[2]
img_hgth <- dim(full_page_image)[1]
if(i==3)
{
img_hgth <- img_hgth - 50
}
eye_scroll_correct(eyes_data = d, timestamp_start = d_start_stop$Timestamp[i], timestamp_stop = d_start_stop$Timestamp[i+1], image_width = img_wdth, image_height = img_hgth, calibration = cal, time_shift = t_shift$Timestamp[1], output_file = file.path("Results", paste0("S", i, "_1920_1080_iMotions", ".csv")), scroll_lag = (1/120)*1000)
}
# Written by Nathanael Larigaldie
library(tidyverse)
library(png)
library(eyeScrollR)
get_sync_time <- function(file_name)
{
d <- read_tsv(file.path("Data", "EyeLink", file_name, "Reports", "Output", "messages.xls"), col_types = "ccccc")
d <- d %>% filter(CURRENT_MSG_TEXT == "SYNCTIME")
return(as.numeric(d$CURRENT_MSG_TIME) + as.numeric(d$TRIAL_START_TIME))
}
merge_datasets <- function(file, sync_time, file_name)
{
display_data <- read_csv(file.path("Data", "EyeLink", file)) %>% mutate(Timestamp = round(Timestamp)) %>% select(Timestamp, Source, Data)
sync_time_display <- display_data$Timestamp[which(grepl("SYNCTIME", display_data$Data, fixed=TRUE))]
sync_time_shift <- sync_time - sync_time_display
gaze_data <- read_tsv(file.path("Data", "EyeLink", file_name, "Reports", "Output", "gaze.xls"), col_types = "ccccccc")
fix_data <- read_tsv(file.path("Data", "EyeLink", file_name, "Reports", "Output", "fixations.xls"), col_types = "cccccccc")
trial_start_time <- as.numeric(sub(",", ".", gaze_data$TRIAL_START_TIME[1], fixed = TRUE))
merged_data <- gaze_data %>% left_join(fix_data %>% select(CURRENT_FIX_X, CURRENT_FIX_Y, CURRENT_FIX_START, CURRENT_FIX_END, CURRENT_FIX_INDEX), by=join_by(RIGHT_FIX_INDEX == CURRENT_FIX_INDEX))
eyes_data <- tibble(Timestamp = as.numeric(sub(",", ".", merged_data$TIMESTAMP, fixed = TRUE)) - sync_time_shift,
Gaze.X = as.numeric(sub(",", ".", merged_data$RIGHT_GAZE_X, fixed = TRUE)),
Gaze.Y = as.numeric(sub(",", ".", merged_data$RIGHT_GAZE_Y, fixed = TRUE)),
Fixation.X = as.numeric(sub(",", ".", merged_data$CURRENT_FIX_X, fixed = TRUE)),
Fixation.Y = as.numeric(sub(",", ".", merged_data$CURRENT_FIX_Y, fixed = TRUE)),
Fixation.Start = as.numeric(sub(",", ".", merged_data$CURRENT_FIX_START, fixed = TRUE)) + trial_start_time - sync_time_shift,
Fixation.End = as.numeric(sub(",", ".", merged_data$CURRENT_FIX_END, fixed = TRUE)) + trial_start_time - sync_time_shift,
Fixation.Index = as.numeric(sub(",", ".", merged_data$RIGHT_FIX_INDEX, fixed = TRUE)))
return(display_data %>% full_join(eyes_data, by="Timestamp") %>% arrange(Timestamp))
}
infer_video_frames <- function(d, fps)
{
frame_number <- -1
minutes <- 0
seconds <- 0
frame <- -1
d$Video.Frame <- " "
d$Video.Frame.N <- -1
for(i in seq_len(nrow(d)))
{
if(grepl("Frame", d[[i, "Data"]], fixed=TRUE))
{
frame_number <- as.numeric(strsplit(d[[i, "Data"]], " ")[[1]][2])
frame <- frame_number %% fps
seconds <- floor(frame_number/fps) %% 60
minutes <- floor(floor(frame_number/fps)/60) %% 60
}
d[i, "Video.Frame"] <- paste0(minutes, "m", seconds, "s", frame, "f")
d[i, "Video.Frame.N"] <- frame_number
}
return(d)
}
fps <- 30.0
list_files <- list.files(path= file.path("Data", "EyeLink"),pattern = "*.csv$")
for(file in list_files)
{
file_name <- strsplit(file, ".", fixed=TRUE)[[1]][1]
sync_time <- get_sync_time(file_name)
d <- merge_datasets(file, sync_time, file_name)
d <- infer_video_frames(d, fps)
start_time <- d %>% filter(Data == "SYNCTIME")
start_time <- start_time$Timestamp
end_time <- d %>% filter(Data == "Key: 's' (Released)")
end_time <- end_time$Timestamp
# write_csv(d, file.path("Results", paste0(file_name, "_merged", ".csv")), na="")
## eyeScrollR specific code here
cal_img <- readPNG(file.path("Data", "EyeLink", paste0("calibration_", strsplit(file_name, "_", fixed=TRUE)[[1]][2], "_", strsplit(file_name, "_", fixed=TRUE)[[1]][3], ".png")))
cal <- scroll_calibration_auto(cal_img, 100)
full_page_image <- readPNG(file.path("Data", "EyeLink", file_name, "full_page_image.png"))
if(file.exists(file.path("Data", "EyeLink", paste0(file_name, ".RData"))))
{
load(file.path("Data", "EyeLink", paste0(file_name, ".RData")))
}
else
{
fixed_areas = list()
rules = list()
}
img_wdth <- dim(full_page_image)[2]
img_hgth <- dim(full_page_image)[1]
if(grepl("S3", file, fixed=TRUE))
{
img_hgth <- img_hgth - 50
}
eye_scroll_correct(eyes_data = d, timestamp_start = start_time, timestamp_stop = end_time, image_width = img_wdth, image_height = img_hgth, calibration = cal, output_file = file.path("Results", paste0(file_name, ".csv")), scroll_lag = (1/120)*1000, fixed_areas = fixed_areas, rules = rules)
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.Y)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
filter(!is.na(V.Frame.N)) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Complete", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Blinded", file))
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.Y)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
filter(!is.na(V.Frame.N), (Ts.End - Ts.Start)>(1/24)*1000) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Complete", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Blinded", file))
}
# Written by Nathanael Larigaldie
list_files <- list.files(path = "Results", pattern = "*.csv$")
for(file in list_files)
{
d <- read_csv(file.path("Results", file))
d <- d %>%
filter(!is.na(Corrected.Fixation.Y)) %>%
select(Timestamp.Shifted, Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y, Video.Frame.N, Video.Frame) %>%
group_by(Corrected.Fixation.X, Corrected.Fixation.Y, Fixation.X, Fixation.Y) %>%
summarise(Ts.Start = first(Timestamp.Shifted), Ts.End = last(Timestamp.Shifted), V.Frame.N = nth(Video.Frame.N, round(n()/2)), V.Frame = nth(Video.Frame, round(n()/2))) %>%
ungroup() %>%
filter(!is.na(V.Frame.N), (Ts.End - Ts.Start)>(2/24)*1000) %>%
slice_sample(n=30) %>%
arrange(Ts.Start)
write_csv(d, file.path("Results", "Complete", file))
write_csv(d %>% select(Fixation.X, Fixation.Y, V.Frame, V.Frame.N), file.path("Results", "Blinded", file))
}
library(renv)
renv::init()
renv::init()
renv::snapshot()
library(tidyverse)
library(png)
library(eyeScrollR)
renv::snapshot()
renv::status()
